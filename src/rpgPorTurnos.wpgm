import wollok.game.*
import personaje.*
import extras.*
import enemigos.*
import randomizer.*
import posiciones.*
import paleta.*
import armas.*
import paredes.*
import pelea.*

program rpgPorTurnos {
	game.title("RPG por turnos de nombre a confirmar")
	game.height(25) 		
	game.width(30) 			
	game.cellSize(32) 		
	game.boardGround("fondoNivel1.png") //posibilidad: usar objeto fondo para manejar el fondo (¿aún así lo inicializamos con esto, no?)

	//OBJETOS CON LOS QUE NO SE INTERACTUA
	game.addVisual(listaDeObjetos)

	//OBJETOS CON LOS QUE SE INTERACTUA
	fabricaDeOjoVolador.agregarNuevoEnemigo(game.at(23,15), 150, 20)
	fabricaDeGoblin.agregarNuevoEnemigoCon(game.at(15,14), 95, 37)
	fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(3,10), 200, 43, visionDerecha) 
	fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(26,10), 200, 43, visionIzquierda) 
	//¿el que más vida tiene es el que más daño causa? ¿no es too much?
	//por alguna razón, el 2do esqueleto solamente busca al pj dps de muerto el 1er esqueleto. de hecho. el 1er esqueleto como que 
	//lockea el movimiento de todo lo que viene dps de él. si ponemos el ojo dps del 1er esqueleto tampoco sigue al personaje como debería
	//probé poniendo 2 ojos y no pasa que el 1ro lockee el movimiento del 2do. Es algo de la subclase Esqueleto, parece
	//mientras el 1er esqueleto esté vivo, el 2do NO hace lo de ver a su alrededor para atacar
	
	//podríamos replicar el no uso de un const/referencia para las armas y corazones tal como se hace arriba con los enemigos!
    const arma1 = randomizer.armaRandom()
	game.addVisual(arma1)
	const arma2 = randomizer.armaRandom() 
	game.addVisual(arma2)

	const corazon1 = new Corazon() 
	game.addVisual(corazon1)

	//PERSONAJE
	game.addVisual(personaje)
	
	//TECLAS MOVIMIENTO
	keyboard.w().onPressDo({personaje.mover(arriba)})
	keyboard.d().onPressDo({personaje.mover(derecha)})
	keyboard.s().onPressDo({personaje.mover(abajo)})
	keyboard.a().onPressDo({personaje.mover(izquierda)})
    
    //TECLAS COMBATE
    keyboard.up().onPressDo({ personaje.atacar()})

	//COLISIÓN
    game.onCollideDo(personaje, {cosa => cosa.colisiono(personaje)})

	//PAREDES entiendo que de momento no estamos usando esto, ¿no? Lo usaríamos si hay elementos imposibles de traspasar como una mesa
	//borde.cargar()
	//borde.mostrar()

    //test turnos
    //game.addVisual(turnoTest)

	game.start()
}