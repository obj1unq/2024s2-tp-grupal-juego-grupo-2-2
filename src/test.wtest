import wollok.game.*
import personaje.*
import extras.*
import enemigos.*
import randomizer.*
import posiciones.*
import paleta.*
import armas.*
import pelea.*
import mapa.*
import niveles.*

/*
describe "prueba de movimiento de enemigo1" {

    test "distancia a la que está objetivoADestruir (personaje)" {
        assert.equals(5, enemigo1.distanciaEnEjeX())
        assert.equals(5, enemigo1.distanciaEnEjeY())
        personaje.mover(izquierda) //acá el enemigo se movería hacia arriba, porque le queda más lejos el eje y de nuestro personaje
        assert.equals(4, enemigo1.distanciaEnEjeX())
        assert.equals(4, enemigo1.distanciaEnEjeY())
    }

}
*/

/*
    chocar con objetos
*/

describe "testeo de funcionalidades" {

    method initialize() {
        game.width(30)
        game.height(25)
    }

    test "lista de enemigos de la dungeon" {
        fabricaDeOjoVolador.agregarNuevoEnemigo(game.at(20,9), 150, 20)
	    fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(3,10), 200, 43, 3) 
	    fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(26,10), 200, 43, 3)
	    fabricaDeGoblin.agregarNuevoEnemigoCon(game.at(15, 14), 95, 37)
        assert.equals(4, dungeon.enemigos().size())
    }

    test "método de game getObjectsIn(pos) y método de dungeon limpiarExceptoFondo()" {
        fabricaDeOjoVolador.agregarNuevoEnemigo(game.at(23,15), 150, 20)
        fabricaDeGoblin.agregarNuevoEnemigoCon(game.at(15,14), 95, 37)
        fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(3,10), 200, 43, 3) 
        fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(26,10), 200, 43, 3) 
        assert.equals(1, game.getObjectsIn(game.at(26,10)).size())
        assert.equals(1, game.getObjectsIn(game.at(23,15)).size())
        dungeon.limpiarTablero()
        assert.equals(0, game.getObjectsIn(game.at(26,10)).size())
        assert.equals(0, game.getObjectsIn(game.at(23,15)).size())
    }

    test "No puede curarse pq no estoy en combate" {
      assert.throwsException({ personaje.hacerTurnoPocion() })
    }

    test "no puedo pergar pq no estoy en combate" {
      assert.throwsException({ personaje.hacerTurnoAtaqueComun() })
    }
}

describe "movimiento pj"{
    method initialize(){
         game.height(25)
	    game.width(30)
    }

    test" se mueve a todas las direcciones" {

        //pos inicio pj = (14,5)
        personaje.mover(arriba)
        assert.equals(game.at(14,3), personaje.position())

        personaje.mover(abajo)
        assert.equals(game.at(14,2), personaje.position())

        personaje.mover(derecha)
        assert.equals(game.at(15,2), personaje.position())

        personaje.mover(izquierda)
        assert.equals(game.at(14,2), personaje.position())


    }

    test "pj se choca y no se puede mover"{
        fabricaDeBarriles.agregarNuevoBarril(game.at(14,3))


        assert.equals(game.at(14,2), personaje.position())
        assert.throwsException( {personaje.mover(arriba)} ) 

        assert.equals(game.at(14,2), personaje.position())
    }
}

describe "Combate"{
        method initialize() {
        game.width(30)
        game.height(25)
        game.addVisual(personaje) //pos = 14,2

        personaje.salud(300)

    }   

    const goblin = new Goblin(position = game.at(15, 3), salud = 100, danhoBase = 30)
    const espada = new Espada(position = game.at(0,0), durabilidad = 300)

    test "empieza combate"{
        assert.notThat(combate.hayCombate())
        goblin.colisiono(personaje)
        assert.that(combate.hayCombate())
        assert.equals(goblin, personaje.enemigoCombatiendo())
    }

    test "Pj y enemigo ataque comun" {
        goblin.colisiono(personaje)
        //suponemos que el enemigo ataca...
        combate.cambiarTurnoA(personaje)

        assert.doesNotThrowException( {personaje.hacerTurnoAtaqueComun()})
        personaje.realizarAtaqueComun() //schedule
        assert.equals(95, goblin.salud())
        
        combate.cambiarTurnoA(goblin) //schedule

        assert.doesNotThrowException( {goblin.realizarAtaqueNormalOHabilidad() } )
        assert.equals(270, personaje.salud())
    }

    test "Pj y enemigo ataque especial" {
        // agregar metodo para poder cambiar nivel en armas. Para los tests
        espada.nivel(1)
        personaje.equiparArma(espada)

        goblin.colisiono(personaje)
        //suponemos que el enemigo ataca...
        combate.cambiarTurnoA(personaje)

       assert.doesNotThrowException( {personaje.hacerTurnoHabilidadEspecial() }) //puede hacer ataque especial
        personaje.realizarHabilidadEspecial() //schedule
        assert.equals(59, goblin.salud())


        combate.cambiarTurnoA(goblin) //schedule
        //agregar setter acumular de turnos a los enemigos. Para los test
        goblin.acumuladorDeTurnos(2)
        assert.doesNotThrowException( {goblin.realizarAtaqueNormalOHabilidad()} ) //puede hacer ataque especial
        
        assert.equals(210, personaje.salud())
    }

    test "Pj no puede atacar porque no hay combate"{
            assert.throwsException({ personaje.realizarAtaqueComun() })
    }

    test "Pj se cura"{
        goblin.colisiono(personaje) //empieza combate

        assert.equals(300, personaje.salud())

        goblin.utilizarHabilidad()
        assert.equals(210, personaje.salud())
        combate.cambiarTurnoA(personaje)

        personaje.hacerTurnoPocion()
        personaje.usarPocionSalud() //esta en un schedule
        assert.equals(360, personaje.salud())

    }

    test "enemigo muere"{
        dungeon.registrarEnemigo(goblin)



        assert.that( !dungeon.enemigos().isEmpty() )
        goblin.colisiono(personaje)

        espada.nivel(3)
        personaje.equiparArma(espada)

        personaje.realizarAtaqueComun()
        personaje.realizarAtaqueComun()
        personaje.realizarAtaqueComun()

        assert.equals(0,  goblin.salud())

        goblin.morir()
        dungeon.sacarEnemigo(goblin) //esta en un schedule


        assert.notThat( !dungeon.enemigos().isEmpty()  )

    }
}

describe "objetos varios y niveles"{
    test "crea un arma y esta en la posicion dada"{
        const arma = new Lanza(position = game.at(20,3), durabilidad = 120.randomUpTo(150).round())
        game.addVisual(arma)

        assert.equals([arma], game.getObjectsIn(game.at(20,3)) ) 
    }

    test"crea enemigo y esta en la posicion dada" {
        fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(3,10), 200, 43, 3) 

        assert.that( dungeon.hayEnemigoEn(game.at(3,10)) )
        assert.notThat( dungeon.hayEnemigoEn(game.at(20,19)) )
    }

    test "agarra pocion" {
        //suponemos que termino el combate y usó una pocionn...
        personaje.usarPocionSalud()
        assert.equals(2, personaje.cantPociones())

        const poti = new Pocion(position = game.at(1,1))
        game.addVisual(poti)

        poti.colisiono(personaje)
        assert.equals(3, personaje.cantPociones())

    }

    test "agarra arma"{
        const arma1 = new Lanza(position = game.at(5,7), durabilidad = 120.randomUpTo(150).round())
        const arma2 = new Maza(position = game.at(5,5), durabilidad = 60.randomUpTo(90).round())
        const arma3 = new Maza(position = game.at(5,6), durabilidad = 60.randomUpTo(90).round())
        const arma4 = new Lanza(position = game.at(5,7), durabilidad = 120.randomUpTo(150).round())

        personaje.equiparArma(arma1)
        personaje.equiparArma(arma2)
        // no tira error por que agarra tres armas
        assert.doesNotThrowException({ personaje.equiparArma(arma3)})

        //tira error porque ya tiene 3 armas
        assert.throwsException({ personaje.equiparArma(arma4)})        

        
    }

    test"pasar Nivel"{
        const goblin = new Goblin(position = game.at(1, 1), salud = 100, danhoBase = 30)
        const ojo = new OjoVolador(position = game.at(2, 2), salud = 100, danhoBase = 30)
        const goblin2 = new Goblin(position = game.at(1, 1), salud = 100, danhoBase = 30)
        const ojo2 = new OjoVolador(position = game.at(2, 2), salud = 100, danhoBase = 30)


        //el pj esta en el nivel 1
        assert.equals(nivel1, dungeon.nivelActual())

        //el pj mata a todos los enemigos
        goblin.morir()
        ojo.morir()
        ojo2.morir()
        goblin2.morir()
        assert.equals(4, personaje.enemigosAsesinados())

        //la puerta esta abierta, se puede pasar
        assert.doesNotThrowException( {puerta.colisiono(personaje)} )


        
        assert.equals(game.at(14,2), personaje.position())
        assert.equals(0, personaje.enemigosAsesinados())
        dungeon.pasarNivel() //schedule
        assert.equals(nivel2, dungeon.nivelActual())
    }

}