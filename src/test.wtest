import wollok.game.*
import personaje.*
import extras.*
import enemigos.*
import randomizer.*
import posiciones.*
import paleta.*
import armas.*
import paredes.*
import pelea.*
import mapa.*

/*
describe "prueba de movimiento de enemigo1" {

    test "distancia a la que está objetivoADestruir (personaje)" {
        assert.equals(5, enemigo1.distanciaEnEjeX())
        assert.equals(5, enemigo1.distanciaEnEjeY())
        personaje.mover(izquierda) //acá el enemigo se movería hacia arriba, porque le queda más lejos el eje y de nuestro personaje
        assert.equals(4, enemigo1.distanciaEnEjeX())
        assert.equals(4, enemigo1.distanciaEnEjeY())
    }

}
*/

describe "testeo de funcionalidades" {

    method initialize() {
        game.width(30)
        game.height(25)
    }

    test "lista de enemigos de la dungeon" {
        fabricaDeOjoVolador.agregarNuevoEnemigo(game.at(20,9), 150, 20)
	    fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(3,10), 200, 43, 3) 
	    fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(26,10), 200, 43, 3)
	    fabricaDeGoblin.agregarNuevoEnemigoCon(game.at(15, 14), 95, 37)
        assert.equals(4, dungeon.enemigos().size())
    }

    test "método de game getObjectsIn(pos) y método de mapa limpiar()" {
        fabricaDeOjoVolador.agregarNuevoEnemigo(game.at(23,15), 150, 20)
        fabricaDeGoblin.agregarNuevoEnemigoCon(game.at(15,14), 95, 37)
        fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(3,10), 200, 43, 3) 
        fabricaDeEsqueleto.agregarNuevoEnemigo(game.at(26,10), 200, 43, 3) 
        assert.equals(1, game.getObjectsIn(game.at(26,10)).size())
        assert.equals(1, game.getObjectsIn(game.at(23,15)).size())
        mapa.limpiar()
        assert.equals(0, game.getObjectsIn(game.at(26,10)).size())
        assert.equals(0, game.getObjectsIn(game.at(23,15)).size())
    }

}

describe "Combate"{
        method initialize() {
        game.width(30)
        game.height(25)
        game.addVisual(personaje) //pos = 14,2

    }   

    const goblin = new Goblin(position = game.at(15, 3), salud = 100, danhoBase = 30)

    const espada = new Espada(position = game.at(0,0), durabilidad = 300)

    test "empieza combate"{
        assert.notThat(combate.hayCombate())
        goblin.colisiono(personaje)
        assert.that(combate.hayCombate())
        assert.equals(goblin, personaje.enemigoCombatiendo())
    }

    test "Pj y enemigo ataque comun" {
        goblin.colisiono(personaje)
        personaje.realizarAtaqueComun()
        assert.equals(95, goblin.salud())

        goblin.realizarAtaqueNormalOHabilidad()
        assert.equals(270, personaje.salud())
    }

    test "Pj y enemigo ataque especial" {
        goblin.colisiono(personaje)

        espada.nivel(1)
        personaje.equiparArma(espada)

        personaje.realizarHabilidadEspecial()
        assert.equals(62, goblin.salud())

        goblin.utilizarHabilidad()
        assert.equals(210, personaje.salud())
    }

    test "Pj no puede atacar porque no hay combate"{
            assert.throwsException({ personaje.realizarAtaqueComun() })
    }

    test "enemigo muere"{
        dungeon.registrarEnemigo(goblin)



        assert.that( !dungeon.enemigos().isEmpty() )
        goblin.colisiono(personaje)

        espada.nivel(3)
        personaje.equiparArma(espada)

        personaje.realizarAtaqueComun()
        personaje.realizarAtaqueComun()
        personaje.realizarAtaqueComun()

        assert.equals(0,  goblin.salud())

        goblin.morir()
        dungeon.sacarEnemigo(goblin) //esta en un schedule


        assert.notThat( !dungeon.enemigos().isEmpty()  )

    }
}